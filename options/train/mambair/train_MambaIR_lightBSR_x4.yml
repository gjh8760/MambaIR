name: MambaIR_lightBSR_x4_debug
model_type: MambaIRModel
scale: 4
num_gpu: 1
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    task: BSR
    name: SyntheticBurst
    type: ZurichRawBurstDataset
    dataroot: /data/gjh8760/datasets/Zurich-RAW-to-DSLR-Dataset/train/canon
    filename_tmpl: '{}'
    io_backend:
      type: disk

    gt_size: 384  # or 448?
    use_hflip: true
    use_rot: false

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 1
    batch_size_per_gpu: 1
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

    # processing
    crop_sz: 384
    burst_sz: 14
    downsample_factor: 4
    max_translation: 24.0
    max_rotation: 1.0
    max_shear: 0.0
    max_scale: 0.0
    border_crop: 24
    random_ccm: true
    random_gains: true
    smoothstep: true
    gamma: true
    add_noise: true

  val:
    name: SyntheticBurstVal
    type: ZurichRawBurstValDataset
    dataroot_gt: /data/gjh8760/datasets/SyntheticBurstVal/gt
    dataroot_lq: /data/gjh8760/datasets/SyntheticBurstVal/bursts
    filename_tmpl: '{}'
    io_backend:
      type: disk

# network structures
network_g:
  type: MambaIR
  upscale: 4
  in_chans: 4
  img_size: 48
  window_size: 8
  img_range: 1.
  d_state: 10 # 16
  depths: [2, 2, 4, 4, 4]  # [6, 6, 6, 6, 6, 6]
  embed_dim: 96  # 180
  mlp_ratio: 2
  upsampler: 'pixelshuffle'
  resi_connection: '1conv'

# path
path:
# for classic SRx4, we use the x2 Model to initialize and halve the training iteration and lr for fast training
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~


# training settings
train:
  optim_g:
    type: Adam
    # lr: !!float 2e-4
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [ 250000, 400000, 450000, 475000 ]
    # milestones: [ 125000, 200000, 225000, 237500 ]
    gamma: 0.5

  total_iter: 500000
  # total_iter: 250000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
# validation settings
val:
  val_freq: !!float 5e3
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 40
      test_y_channel: false



# logging settings
logger:
  print_freq: 200
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500